name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      IMAGE_URI: 381792517210.dkr.ecr.ap-southeast-2.amazonaws.com/aidin/simple-go-auth

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: testdb
        ports: ["5432:5432"]
        options: >-
          --health-cmd "pg_isready -U postgres -d testdb"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.2'

      - name: Run Go mod tidy
        run: go mod tidy

      - name: Lint (fmt & vet)
        run: |
          go fmt ./...
          go vet ./...

      - name: Run Go tests
        env:
          DOTENV_FILE: .env.sample
        run: |
          echo "PORT=1234" > .env.sample
          echo "AWS_REGION=foo" >> .env.sample
          echo "AWS_ACCESS_KEY_ID=test-key" >> .env.sample
          echo "AWS_SECRET_ACCESS_KEY=test-secret" >> .env.sample
          echo "DB_HOST=localhost" >> .env.sample
          echo "DB_USER=postgres" >> .env.sample
          echo "DB_PASSWORD=password" >> .env.sample
          echo "DB_NAME=testdb" >> .env.sample
          # Clean up the database before running tests
          psql -h localhost -U postgres -d testdb -c "DELETE FROM users;"
          go test ./tests/auth_test.go ./tests/new_test.go ./tests/db_integration_test.go -v
          go test ./tests/auth_test.go ./tests/new_test.go ./tests/db_integration_test.go -coverprofile=coverage.out
          go tool cover -func=coverage.out

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Docker image
        run: |
          docker build -t $IMAGE_URI:latest .
          docker push $IMAGE_URI:latest

      # Terraform deploy (only on main branch)
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.0

      - name: Terraform Init & Apply
        if: github.ref == 'refs/heads/main'
        working-directory: infra/terraform
        run: |
          terraform init
          terraform apply -auto-approve
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Kubernetes deploy (after TF)
      - name: Configure kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Deploy to EKS
        run: |
          kubectl apply -f k8s/
          kubectl rollout status deployment/auth-service -n auth

      # Post-deploy smoke test
      - name: Run smoke tests
        run: ./tests/smoke_test.sh
        env:
          SERVICE_HOST: ${{ steps.deploy.outputs.host }}

      - name: Install k6
        run: |
              wget https://github.com/grafana/k6/releases/download/v0.45.0/k6-v0.45.0-linux-amd64.tar.gz
              tar -xzf k6-v0.45.0-linux-amd64.tar.gz
              sudo mv k6-v0.45.0-linux-amd64/k6 /usr/local/bin/
          
      - name: Run k6 load test
        run: k6 run --vus 10 --duration 30s loadtest/k6/auth.js
